# Determine OS
os=`uname -a | awk '{ print $1 }'`

# Set lsof and kill
if [ "$os" = "SunOS" ]; then
	lsof="/opt/local/sbin/lsof -C"
	kill=""
elif [ "$os" = "Linux" ]; then
	lsof="/usr/sbin/lsof"
	kill="-9"
fi

# Get process ids by port
## $1 = resultvar
## $2 = portlist
pids_by_port()
{
  result=`$lsof -i :$2 | grep '(LISTEN)$' | \
    awk '{ print $2 }' | sort -u | \
    awk '{ if (NR > 1) printf(" "); printf("%s", $1) }'`
  eval $1="\$result"
  unset result
}

# Stop processes by port
## $1 = portlist
## $2 = servername
stop_by_port()
{
  echo "*** stopping $2..."
  pids_by_port pids $1
  if [ -n "$pids" ]
  then
    echo "sending kill signal to PIDs $pids"
    kill $kill $pids
if [ "$os" = "SunOS" ]; then
    echo "waiting for PIDs $pids to terminate...\c"
    /usr/proc/bin/pwait $pids
    echo "terminated"
fi
    datestring=`date +%y.%m.%d-%X`
    echo "saving log files..."
    cd $logdir
    mkdir -p history/$datestring
    mv system* history/$datestring
    mv *.log* history/$datestring
    mv *.tlog history/$datestring
    mv access.log* history/$datestring
    for i in `ls -dt *`
    do
        if [[ -d $i && "$i" != "history" ]]; then
            mv $i history/$datestring
            mkdir $i
        fi
    done
  fi
  status_by_port $1 $2
}

# Get status by port
## $1 = portlist
## $2 = servername
status_by_port()
{
  pids_by_port pids $1
  if [ -z "$pids" ]
  then
    status="not running"
  else
    status="running, PIDs=$pids"
  fi
  echo "server=$2, portlist=$1, status: $status"
}

# Ping weblogic server by port
## $1 = port
## $2 = servername
weblogic_ping()
{
  echo "ping $2"
  $java_cmd -classpath $weblogic_cp \
    weblogic.T3Admin T3://localhost:$1 ping 10
  echo "result: $?"
}
